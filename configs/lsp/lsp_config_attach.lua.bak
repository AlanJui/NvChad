local configs = require "plugins.configs.lspconfig"
local on_attach = configs.on_attach
local capabilities = configs.capabilities
-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)

local lspconfig = require "lspconfig"

-- if you just want default config for the servers then put them in a table
local servers = {
  "cssls", -- css-lsp
  "tailwindcss", -- tailwindcss-lsp
  "eslint", -- eslint-lsp
  "taplo", -- toml-lsp
  "dockerls", -- docker-lsp
}
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    on_attach = on_attach,
    capabilities = capabilities,
  }
end

lspconfig["lua_ls"].setup {
  on_attach = function(client, bufnr)
    client.server_capabilities.signatureHelpProvider = false
    on_attach(client, bufnr)
  end,
  capabilities = capabilities,
  settings = {
    Lua = {
      diagnostics = {
        globals = { "vim" },
      },
      workspace = {
        library = {
          [vim.fn.expand "$VIMRUNTIME/lua"] = true,
          [vim.fn.expand "$VIMRUNTIME/lua/vim/lsp"] = true,
          [vim.fn.stdpath "data" .. "/lazy/ui/nvchad_types"] = true,
          [vim.fn.stdpath "data" .. "/lazy/lazy.nvim/lua/lazy"] = true,
        },
        maxPreload = 100000,
        preloadFileSize = 10000,
      },
    },
  },
}

lspconfig["clangd"].setup {
  on_attach = function(client, bufnr)
    client.server_capabilities.signatureHelpProvider = false
    on_attach(client, bufnr)
  end,
  capabilities = capabilities,
}

-- configure python ls
lspconfig["pylsp"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
  settings = {
    pylsp = {
      pycodestyle = {
        ignore = { "W391" },
        maxLineLength = 100,
      },
    },
  },
}

-- configure typescript server with plugin
lspconfig["tsserver"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
}

-- configure vue server with plugin
lspconfig["vuels"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
}

-- configure emmet language server
lspconfig["emmet_ls"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
  filetypes = {
    "html",
    "htmldjango",
    "typescriptreact",
    "javascriptreact",
    "vue",
    "css",
    "sass",
    "scss",
    "less",
    "svelte",
  },
}

-- configure html server
lspconfig["html"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
  filetypes = {
    "html",
    "htmldjango",
  },
}

-- configure json server
lspconfig["jsonls"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
  filetypes = {
    "json",
    "jsonc",
  },
}

-- configure xml server
lspconfig["lemminx"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
  filetypes = { "xml", "xsd", "xsl", "xslt", "svg" },
}

-- configure yaml server
lspconfig["yamlls"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
  filetypes = {
    "yaml",
    "yaml.docker-compose",
  },
  settings = {
    yaml = {
      schemas = {
        ["https://json.schemastore.org/github-workflow.json"] = "/.github/workflows/*",
        -- ["../path/relative/to/file.yml"] = "/.github/workflows/*",
        -- ["/path/from/root/of/project"] = "/.github/workflows/*",
      },
    },
  },
}

-- configure toml server
lspconfig["taplo"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
}

-- configure docker server
lspconfig["dockerls"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
}

-- configure markdown server
lspconfig["marksman"].setup {
  capabilities = capabilities,
  on_attach = on_attach,
  filetypes = {
    "markdown",
    "markdown.mdx",
  },
}

-- configure lua server (with special settings)
-- lspconfig["lua_ls"].setup {
--   capabilities = capabilities,
--   on_attach = on_attach,
--   settings = { -- custom settings for lua
--     Lua = {
--       -- make the language server recognize "vim" global
--       diagnostics = {
--         globals = { "vim", "hs" },
--       },
--       workspace = {
--         -- make language server aware of runtime files
--         library = {
--           [vim.fn.expand "$VIMRUNTIME/lua"] = true,
--           [vim.fn.stdpath "config" .. "/lua"] = true,
--         },
--       },
--     },
--   },
-- }

-- configure python ls
-- lspconfig["ruff_lsp"].setup {
--   capabilities = capabilities,
--   on_attach = on_attach,
--   init_options = {
--     settings = {
--       -- Any extra CLI arguments for `ruff` go here.
--       args = {},
--     },
--   },
-- }

-- configure rust server with plugin
-- lspconfig["rust_analyzer"].setup {
--   capabilities = capabilities,
--   on_attach = on_attach,
--   settings = {
--     ["rust-analyzer"] = {
--       diagnostics = {
--         enable = false,
--       },
--     },
--   },
-- }

-- configure python server
-- lspconfig["pyright"].setup {
--   capabilities = capabilities,
--   on_attach = on_attach,
-- }

-- Global mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local keymap = vim.keymap -- for conciseness
local opts = { noremap = true, silent = true }

opts.desc = "Show floating diagnostics"
keymap.set("n", "<leader>cX", vim.diagnostic.open_float, opts) -- show diagnostics for line

opts.desc = "Show line diagnostics"
keymap.set("n", "<leader>cx", vim.diagnostic.setloclist, opts) -- show diagnostics for line

opts.desc = "Go to previous diagnostic"
keymap.set("n", "[d", vim.diagnostic.goto_prev, opts) -- jump to previous diagnostic in buffer

opts.desc = "Go to next diagnostic"
keymap.set("n", "]d", vim.diagnostic.goto_next, opts) -- jump to next diagnostic in buffer

-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd("LspAttach", {
  group = vim.api.nvim_create_augroup("UserLspConfig", {}),
  callback = function(ev)
    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }

    opts.desc = "Go to declaration"
    keymap.set("n", "<leader>cD", vim.lsp.buf.declaration, opts) -- go to declaration

    opts.desc = "Show LSP definitions"
    keymap.set("n", "<leader>cd", "<cmd>Telescope lsp_definitions<CR>", opts) -- show lsp definitions

    opts.desc = "Show LSP type definitions"
    keymap.set("n", "<leader>cft", "<cmd>Telescope lsp_type_definitions<CR>", opts) -- show lsp type definitions

    opts.desc = "Show LSP implementations"
    keymap.set("n", "<leader>cfi", "<cmd>Telescope lsp_implementations<CR>", opts) -- show lsp implementations

    opts.desc = "Show LSP references"
    keymap.set("n", "<leader>cfr", "<cmd>Telescope lsp_references<CR>", opts) -- show definition, references

    opts.desc = "Show documentation for what is under cursor"
    keymap.set("n", "K", vim.lsp.buf.hover, opts) -- show documentation for what is under cursor

    opts.desc = "Show signature help"
    keymap.set("n", "<leader>ck", function()
      vim.lsp.buf.signature_help()
    end, opts) -- show documentation for what is under cursor

    opts.desc = "Smart rename"
    keymap.set("n", "<leader>cR", vim.lsp.buf.rename, opts) -- smart rename

    opts.desc = "See available code actions"
    keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts) -- see available code actions, in visual mode will apply to selection

    opts.desc = "See available code actions"
    vim.keymap.set("n", "<leader>cf", function()
      vim.lsp.buf.format()
      -- vim.lsp.buf.format { async = true }
    end, opts)

    opts.desc = "List workspace folders"
    vim.keymap.set("n", "<leader>cwl", function()
      print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
    end, opts)

    opts.desc = "Add workspace folder"
    vim.keymap.set("n", "<leader>cwa", function()
      vim.lsp.buf.add_workspace_folder()
    end, opts)

    opts.desc = "Remove workspace folder"
    vim.keymap.set("n", "<leader>cwr", function()
      vim.lsp.buf.remove_workspace_folder()
    end, opts)
  end,
})
