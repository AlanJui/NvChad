local overrides = require("custom.configs.overrides")

vim.opt.termguicolors = true
vim.cmd([[highlight IndentBlanklineIndent1 guifg=#E06C75 gui=nocombine]])
vim.cmd([[highlight IndentBlanklineIndent2 guifg=#E5C07B gui=nocombine]])
vim.cmd([[highlight IndentBlanklineIndent3 guifg=#98C379 gui=nocombine]])
vim.cmd([[highlight IndentBlanklineIndent4 guifg=#56B6C2 gui=nocombine]])
vim.cmd([[highlight IndentBlanklineIndent5 guifg=#61AFEF gui=nocombine]])
vim.cmd([[highlight IndentBlanklineIndent6 guifg=#C678DD gui=nocombine]])
vim.o.spell = true

---@type NvPluginSpec[]
local plugins = {

  -- To make a plugin not be loaded
  -- {
  --   "NvChad/nvim-colorizer.lua",
  --   enabled = false
  -- },

  -- All NvChad plugins are lazy-loaded by default
  -- For a plugin to be loaded, you will need to set either `ft`, `cmd`, `keys`, `event`, or set `lazy = false`
  -- If you want a plugin to load on startup, add `lazy = false` to a plugin spec, for example
  -- {
  --   "mg979/vim-visual-multi",
  --   lazy = false,
  -- },

  -- Override plugin definition options
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      -- format & linting
      {
        "jose-elias-alvarez/null-ls.nvim",
        event = "VeryLazy",
        opts = function()
          return require("custom.configs.null-ls")
        end,
      },
    },
    config = function()
      require("plugins.configs.lspconfig")
      require("custom.configs.lspconfig")
    end, -- Override to setup mason-lspconfig
  },

  {
    "mhartington/formatter.nvim",
    event = "VeryLazy",
    opts = function()
      return require("custom.configs.formatter")
    end,
  },
  {
    "mfussenegger/nvim-lint",
    event = "VeryLazy",
    config = function()
      require("custom.configs.lint")
    end,
  },

  -- override plugin configs
  {
    "williamboman/mason.nvim",
    opts = overrides.mason,
  },

  {
    "nvim-treesitter/nvim-treesitter",
    opts = overrides.treesitter,
  },

  {
    "nvim-tree/nvim-tree.lua",
    opts = overrides.nvimtree,
    -- config = function()
    --   require("custom.configs.nvimtree")
    -- end,
  },

  {
    "zbirenbaum/copilot.lua",
    lazy = false,
    event = "InsertEnter",
    cmd = "Copilot",
    build = ":Copilot auth",
    opts = overrides.copilot,
  },

  -- Install a plugin
  {
    "folke/trouble.nvim",
    cmd = { "TroubleToggle", "Trouble" },
    opts = { use_diagnostic_signs = true },
  },

  {
    "max397574/better-escape.nvim",
    event = "InsertEnter",
    config = function()
      require("better_escape").setup()
    end,
  },

  {
    "NvChad/nvim-colorizer.lua",
    enabled = true,
  },

  {
    "mg979/vim-visual-multi",
    lazy = true,
  },

  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      {
        "zbirenbaum/copilot-cmp",
        config = function()
          require("copilot_cmp").setup()
        end,
      },
    },
    opts = {
      sources = {
        { name = "nvim_lsp", group_index = 2 },
        { name = "copilot", group_index = 2 },
        { name = "luasnip", group_index = 2 },
        { name = "buffer", group_index = 2 },
        { name = "nvim_lua", group_index = 2 },
        { name = "path", group_index = 2 },
      },
    },
  },

  -----------------------------------------------------------
  -- Coding
  -----------------------------------------------------------

  -- A code outline window for skimming and quick navigation
  {
    "stevearc/aerial.nvim",
    keys = {
      --stylua: ignore
      { "<leader>o", "<CMD>AerialToggle<CR>", desc = "Open/Close the Aerial Window", },
      { "}", "<CMD>AerialNext<CR>", desc = "Jump forwards 1 symbol" },
      { "{", "<CMD>AerialPrev<CR>", desc = "Jump backwards 1 symbol" },
    },
    config = true,
  },

  -- Splitting/Joining blocks of code
  {
    "Wansmer/treesj",
    dependices = { "nvim-treesitter" },
    cmd = { "TSJToggle", "TSJSplit", "TSJJoin" },
    keys = {
      { "<leader>ct", "<cmd>TSJToggle<cr>", desc = "Toggle Split/Join Block" },
      { "<leader>cj", "<cmd>TSJJoin<cr>", desc = "Join Block" },
      { "<leader>cs", "<cmd>TSJSplit<cr>", desc = "Split Block" },
    },
    config = function()
      require("treesj").setup({})
    end,
  },

  -- Auto close brackets
  {
    "m4xshen/autoclose.nvim",
    event = "BufEnter",
    config = function()
      require("autoclose").setup()
    end,
  },

  -- active indent guide and indent text objects
  {
    "echasnovski/mini.indentscope",
    version = false, -- wait till new 0.7.0 release to put it back on semver
    event = "BufReadPre",
    opts = {
      symbol = "│",
      options = { try_as_border = true },
    },
    config = function(_, opts)
      vim.api.nvim_create_autocmd("FileType", {
        pattern = { "help", "alpha", "dashboard", "neo-tree", "Trouble", "lazy", "mason" },
        callback = function()
          vim.b.miniindentscope_disable = true
        end,
      })
      require("mini.indentscope").setup(opts)
    end,
  },

  {
    "NvChad/nvterm",
    init = function()
      require("core.utils").load_mappings("nvterm")
    end,
    config = function(_, opts)
      require("base46.term")
      require("nvterm").setup(opts)
      require("core.utils").load_mappings("nvterm")
    end,
  },

  {
    "pianocomposer321/yabs.nvim",
    config = function()
      require("custom.configs.yabs")
      require("core.utils").load_mappings("yabs")
    end,
  },

  -----------------------------------------------------------
  -- DAP
  -----------------------------------------------------------
  {
    "mfussenegger/nvim-dap",
    dependencies = {
      "rcarriga/nvim-dap-ui",
      "theHamsta/nvim-dap-virtual-text",
      "nvim-telescope/telescope-dap.nvim",
      "ibhagwan/fzf-lua",
      "rcarriga/cmp-dap",
    },
    config = function()
      -- require("custom.configs.debug")
      require("custom.configs.dap")
      require("core.utils").load_mappings("dap")
    end,
  },

  --
  -- DAP UI Extensions
  --

  -- UI for nvim-dap
  {
    "rcarriga/nvim-dap-ui",
    keys = {
      {
        "<leader>du",
        function()
          require("dapui").toggle({})
        end,
        desc = "Dap UI",
      },
      {
        "<leader>de",
        function()
          require("dapui").eval()
        end,
        desc = "Eval",
        mode = { "n", "v" },
      },
    },
    opts = {},
    config = function(_, opts)
      local dap = require("dap")
      local dapui = require("dapui")
      dapui.setup(opts)
      dap.listeners.after.event_initialized["dapui_config"] = function()
        dapui.open({})
      end
      dap.listeners.before.event_terminated["dapui_config"] = function()
        dapui.close({})
      end
      dap.listeners.before.event_exited["dapui_config"] = function()
        dapui.close({})
      end
    end,
  },
  -- virtual text for the debugger
  -- Inlines the values for variables as virtual text using treesitter.
  {
    "theHamsta/nvim-dap-virtual-text",
    opts = {},
  },
  -- Integration for nvim-dap with telescope.nvim
  { "nvim-telescope/telescope-dap.nvim" },
  -- UI integration for nvim-dat with fzf
  { "ibhagwan/fzf-lua" },
  -- nvim-cmp source for using DAP completions inside the REPL.
  { "rcarriga/cmp-dap" },

  --
  -- Language specific exensions
  --

  -- DAP for Lua work in Neovim
  {
    "jbyuki/one-small-step-for-vimkind",
    keys = {
      {
        "<leader>daL",
        function()
          require("osv").launch({ port = 8086 })
        end,
        desc = "Start Lua Debugger Server",
      },
      {
        "<leader>dal",
        function()
          require("osv").run_this()
        end,
        desc = "Launch Lua Code",
      },
    },
    config = function()
      require("custom.configs.dap.adapters.nlua")
    end,
  },

  -- DAP for Python
  {
    "mfussenegger/nvim-dap-python",
    ft = "python",
    dependencies = {
      "mfussenegger/nvim-dap",
      "rcarriga/nvim-dap-ui",
    },
    keys = {
      {
        "<leader>daP",
        function()
          require("dap-python").test_method()
        end,
        desc = "Start Python Debugger Server",
      },
      {
        "<leader>dap",
        function()
          require("dap-python").test_class()
        end,
        desc = "Launch Python Code",
      },
    },
    config = function(_, _)
      -- local path = "~/.local/share/NvChad/mason/packages/debugpy/venv/bin/python"
      -- require("dap-python").setup(path)
      -- require("core.utils").load_mappings("dap_python")
      require("custom.configs.dap.adapters.python")
    end,
  },

  -- DAP for Node.js (nvim-dap adapter for vscode-js-debug)
  -- { -- Debugger
  --   "microsoft/vscode-js-debug",
  --   build = "npm install --legacy-peer-deps && npx gulp vsDebugServerBundle && mv dist out",
  --   opt = true,
  -- },
  { -- Plugin
    "mxsdev/nvim-dap-vscode-js",
    dependencies = { "mfussenegger/nvim-dap" },
    ft = { "javascript", "javascriptreact", "typescript", "typescriptreact" },
    config = function()
      -- require("dap.ext.vscode").load_launchjs()
      require("custom.configs.dap.adapters.js")
    end,
  },

  ----------------------------------------------------------------------------------------------------------
  -- Edit
  ----------------------------------------------------------------------------------------------------------

  -- Vim Filetype Support for Crystal
  {
    "vim-crystal/vim-crystal",
    ft = "crystal",
    config = function(_)
      vim.g.crystal_auto_format = 1
    end,
  },

  ----------------------------------------------------------------------------------------------------------
  -- Git
  ----------------------------------------------------------------------------------------------------------
  -- A work-in-progress Magit clone for Neovim that is geared toward the Vim philosophy.
  {
    "TimUntersberger/neogit",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "sindrets/diffview.nvim",
      "nvim-telescope/telescope.nvim", -- optional
      "ibhagwan/fzf-lua", -- optional
    },
    cmd = "Neogit",
    opts = {
      integrations = {
        diffview = true,
      },
      disable_commit_confirmation = true,
    },
    config = function()
      require("custom.configs.neogit")
    end,
  },

  -- {
  --   "lewis6991/gitsigns.nvim",
  --   event = { "BufReadPre", "BufNewFile" },
  --   opts = {
  --     signs = {
  --       add = { text = "▎" },
  --       change = { text = "▎" },
  --       delete = { text = "" },
  --       topdelete = { text = "" },
  --       changedelete = { text = "▎" },
  --       untracked = { text = "▎" },
  --     },
  --     --   on_attach = function(buffer)
  --     --     local gs = package.loaded.gitsigns
  --     --
  --     --     local function map(mode, l, r, desc)
  --     --       vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })
  --     --     end
  --     --
  --     -- -- stylua: ignore start
  --     -- map("n", "]h", gs.next_hunk, "Next Hunk")
  --     -- map("n", "[h", gs.prev_hunk, "Prev Hunk")
  --     -- map({ "n", "v" }, "<leader>ghs", ":Gitsigns stage_hunk<CR>", "Stage Hunk")
  --     -- map({ "n", "v" }, "<leader>ghr", ":Gitsigns reset_hunk<CR>", "Reset Hunk")
  --     -- map("n", "<leader>ghS", gs.stage_buffer, "Stage Buffer")
  --     -- map("n", "<leader>ghu", gs.undo_stage_hunk, "Undo Stage Hunk")
  --     -- map("n", "<leader>ghR", gs.reset_buffer, "Reset Buffer")
  --     -- map("n", "<leader>ghp", gs.preview_hunk, "Preview Hunk")
  --     -- map("n", "<leader>ghb", function() gs.blame_line({ full = true }) end, "Blame Line")
  --     -- map("n", "<leader>ghd", gs.diffthis, "Diff This")
  --     -- map("n", "<leader>ghD", function() gs.diffthis("~") end, "Diff This ~")
  --     -- map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>", "GitSigns Select Hunk")
  --     --   end,
  --   },
  -- },
  -- Git Diff View
  {
    "sindrets/diffview.nvim",
    config = function()
      require("custom.configs.diffview")
    end,
  },

  -- {
  --   "nvim-telescope/telescope.nvim",
  --   cmd = "Telescope",
  -- },

  ----------------------------------------------------------------------------
  -- Markdown
  ----------------------------------------------------------------------------
  {
    -- PlantUML syntax highlighting
    {
      "aklt/plantuml-syntax",
      lazy = false,
      ft = { "plantuml" },
      keys = {
        { "<leader>pu", "<cmd>PlantumlOpen<cr>", desc = "Open PlantUML Preview" },
        { "<leader>ps", "<cmd>PlantumlSave<cr>", desc = "Save PlantUML Preview" },
        { "<leader>pt", "<cmd>PlantumlToggle<cr>", desc = "Toggle PlantUML Preview" },
      },
    },
    -- provides support to mermaid syntax files (e.g. *.mmd, *.mermaid)
    {
      "mracos/mermaid.vim",
      lazy = false,
      ft = { "mermaid", "markdown" },
    },
    -- Markdown Syntax Highlighting
    -- URL: https://github.com/preservim/vim-markdown
    {
      "preservim/vim-markdown",
      config = function()
        -- 變更預設：文件內容毋需折疊
        vim.g.vim_markdown_folding_disabled = 1
        -- vim.g.markdown_fenced_languages = {
        --   "html",
        --   "python",
        --   "bash=sh",
        -- }
        -- disabling conceal for code fences
        -- vim.g.markdown_conceal_code_blocks = 0
      end,
    },
    -- Live server
    {
      "turbio/bracey.vim",
      build = "npm install --prefix server",
    },
    -- Open URI with your favorite browser from Neovim
    {
      "tyru/open-browser.vim",
      lazy = true,
      ft = { "plantuml", "markdown", "html" },
    },
    -- Preview markdown file
    {
      "iamcco/markdown-preview.nvim",
      lazy = false,
      enable = true,
      ft = { "markdown" },
      cmd = { "MarkdownPreview", "MarkdownPreviewStop", "MarkdownPreviewToggle" },
      build = "cd app && yarn install",
      init = function()
        -- 以下這選項，千萬不要設定，否則會造成無法正常預覽
        -- vim.g.mkdp_browserfunc = "open"
        vim.g.mkdp_filetypes = { "markdown" }
        vim.g.mkdp_auto_start = true
        vim.g.mkdp_auto_close = true
        vim.g.mkdp_open_ip = "127.0.0.1"
        vim.g.mkdp_port = "9999"
        vim.g.mkdp_browser = ""
        vim.g.open_to_the_world = false
        vim.g.mkdp_echo_preview_url = true
        vim.g.mkdp_page_title = "${name}"
        vim.g.mkdp_preview_options = {
          mkit = {},
          katex = {},
          uml = {},
          maid = {},
          disable_sync_scroll = 0,
          sync_scroll_type = "middle",
          hide_yaml_meta = 1,
          sequence_diagrams = {},
          flowchart_diagrams = {},
          content_editable = false,
          disable_filename = 0,
          toc = {},
        }
        vim.g.mkdp_markdown_css = ""
        vim.g.mkdp_highlight_css = ""
      end,
      config = function()
        require("core.utils").load_mappings("markdown_preview")
      end,
    },
    -- PlantUML
    {
      "weirongxu/plantuml-previewer.vim",
      ft = { "plantuml" },
      dependices = {
        {
          -- Open URI with your favorite browser from Neovim
          "tyru/open-browser.vim",
          -- PlantUML syntax highlighting
          "aklt/plantuml-syntax",
          -- provides support to mermaid syntax files (e.g. *.mmd, *.mermaid)
          "mracos/mermaid.vim",
        },
      },
      cmd = { "PlantumlOpen", "PlantumlSave", "PlantumlToggle" },
      config = function()
        vim.g.my_jar_path = vim.fn.stdpath("data") .. "/lazy/plantuml-previewer.vim/lib/plantuml.jar"
        vim.cmd([[
          autocmd FileType plantuml let g:plantuml_previewer#plantuml_jar_path = g:my_jar_path
          let g:plantuml_previewer#save_format = "png"
          let g:plantuml_previewer#debug_mode = 1
        ]])
      end,
    },
  },

  ----------------------------------------------------------------------------
  -- UFO folding
  ----------------------------------------------------------------------------
  {
    -- UFO folding
    {
      "kevinhwang91/nvim-ufo",
      dependencies = {
        "kevinhwang91/promise-async",
        {
          "luukvbaal/statuscol.nvim",
          config = function()
            local builtin = require("statuscol.builtin")
            require("statuscol").setup({
              relculright = true,
              segments = {
                { text = { builtin.foldfunc }, click = "v:lua.ScFa" },
                { text = { "%s" }, click = "v:lua.ScSa" },
                { text = { builtin.lnumfunc, " " }, click = "v:lua.ScLa" },
              },
            })
          end,
        },
      },
      event = "BufReadPost",
      opts = {
        provider_selector = function()
          return { "treesitter", "indent" }
        end,
      },
      init = function()
        vim.keymap.set("n", "zR", function()
          require("ufo").openAllFolds()
        end)
        vim.keymap.set("n", "zM", function()
          require("ufo").closeAllFolds()
        end)
      end,
    },
    -- Folding preview, by default h and l keys are used.
    -- On first press of h key, when cursor is on a closed fold, the preview will be shown.
    -- On second press the preview will be closed and fold will be opened.
    -- When preview is opened, the l key will close it and open fold. In all other cases these keys will work as usual.
    {
      "anuvyklack/fold-preview.nvim",
      dependencies = "anuvyklack/keymap-amend.nvim",
      config = true,
    },
  },

  -- Rainbow indent plugin
  {
    "p00f/nvim-ts-rainbow",
    event = "BufRead",
    config = function()
      require("nvim-treesitter.configs").setup({
        rainbow = {
          enable = true,
          extended_mode = true,
          max_file_lines = nil,
        },
      })
    end,
  },

  --   -- Rainbow brackets plugin
  --   {
  --     "lukas-reineke/indent-blankline.nvim",
  --     event = "BufRead",
  --     config = function()
  --       require("indent_blankline").setup({
  --         use_treesitter = true,
  --         space_char_blankline = " ",
  --         show_current_context_start = true,
  --         char_highlight_list = {
  --           "IndentBlanklineIndent1",
  --           "IndentBlanklineIndent2",
  --           "IndentBlanklineIndent3",
  --           "IndentBlanklineIndent4",
  --           "IndentBlanklineIndent5",
  --           "IndentBlanklineIndent6",
  --         },
  --         show_current_context = true,
  --         filetype_exclude = { "help", "dashboard", "dashpreview", "NvimTree", "vista", "sagahover" },
  --         buftype_exclude = { "terminal", "nofile" },
  --         context_patterns = {
  --           "class",
  --           "function",
  --           "method",
  --           "block",
  --           "list_literal",
  --           "selector",
  --           "^if",
  --           "^table",
  --           "if_statement",
  --           "while",
  --           "for",
  --           "loop",
  --           "fn",
  --           "func",
  --         },
  --       })
  --     end,
  --   },
  {
    "folke/trouble.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    cmd = { "TroubleToggle", "Trouble" },
    opts = { use_diagnostic_signs = true },
    keys = {
      { "<leader>xd", "<cmd>TroubleToggle document_diagnostics<cr>", desc = "Document Diagnostics" },
      { "<leader>xw", "<cmd>TroubleToggle workspace_diagnostics<cr>", desc = "Workspace Diagnostics" },
      { "<leader>xx", "<cmd>TroubleToggle<cr>", desc = "Toggle Diagnostics Window" },
      { "<leader>xl", "<cmd>TroubleToggle loclist<cr>", desc = "Toggle Location List" },
      { "<leader>xr", "<cmd>TroubleRefresh<cr>", desc = "Refresh Trouble List Winodw" },
      { "<leader>xq", "<cmd>TroubleToggle quickfix<cr>", desc = "Toggle Quick Fix" },
      { "<leader>xR", "<cmd>TroubleToggle lsp_references<cr>", desc = "Toggle LSP References" },
      { "gR", "<cmd>TroubleToggle lsp_references<cr>", desc = "Toggle LSP References" },
    },
  },
}

return plugins
