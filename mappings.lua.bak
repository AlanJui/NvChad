local M = {}

-- In order to disable a default keymap, use
M.disabled = {
  n = {
    -- ["<C-a>"] = "",
    ["<leader>h"] = "",
    ["<leader>v"] = "",
    ["<leader>ma"] = "",
    ["<leader>th"] = "",
    ["<leader>pt"] = "",
    ["<leader>n"] = "",
    ["<leader>rn"] = "",
  },
}

M.general = {
  n = {
    -- 常用指令
    [";"] = { ":", "enter command mode", opts = { nowait = true } },
    ["<leader>,"] = { ":Telescope buffers<CR>", "Show buffers" },
    ["<leader>e"] = { "<CMD> NvimTreeToggle live_grep <CR>", "Toggle NvimTree" },
    ["<leader><leader>"] = { "<c-^>", "Quick Switch 2 Buffers" }, -- Switch between 2 buffers
    ["jk"] = { "<Esc>", "Escape" },
    ["<C-n>"] = { "<cmd> Telescope <CR>", "Telescope" },
    ["<C-s>"] = { ":Telescope Files <CR>", "Telescope Files" },
    -- Move lines
    ["<S-Down>"] = { ":m .+1<CR>gv=gv", "Move line down", opts = { nowait = true } },
    ["<S-Up>"] = { ":m .-2<CR>gv=gv", "Move line up", opts = { nowait = true } },
    -- Resize window using <Alt> arrow keys
    ["<A-Down>"] = { "<cmd>resize -2<CR>" },
    ["<A-Up>"] = { "<cmd>resize +2<CR>" },
    ["<A-Left>"] = { "<cmd>vertical resize -2<CR>" },
    ["<A-Right>"] = { "<cmd>vertical resize +2<CR>" },
    -- Menu Name
    ["gz"] = { "+surround" },
    ["]"] = { "+next" },
    ["["] = { "+prev" },
    ---------------------------------------------------------------------------
    -- Actions: 常用指令
    ---------------------------------------------------------------------------
    ["<leader>a"] = { "+actions" },
    ["<leader>ah"] = { ':let @/ = ""<CR>', "remove search highlight" },
    ["<leader>at"] = { ":set filetype=htmldjango<CR>", "set file type to django template" },
    ["<leader>aT"] = { ":set filetype=html<CR>", "set file type to HTML" },
    ["<leader>al"] = { ":set wrap!<CR>", "on/off line wrap" },
    ["<leader>an"] = { ":set nonumber!<CR>", "on/off line-numbers" },
    ["<leader>aN"] = { ":set norelativenumber!<CR>", "on/off relative line-numbers" },
    ---------------------------------------------------------------------------
    -- Build Tools
    ---------------------------------------------------------------------------
    ["<leader>B"] = { "+build" },
    ["<leader>Bk"] = {
      function()
        require("nvterm.terminal").send "npx kill-port 8000"
      end,
      "Kill Port",
    },
    ["<leader>Bg"] = {
      function()
        require("nvterm.terminal").send "git status"
      end,
      "git status",
    },
    -- Lua Script
    ["<leader>Bl"] = {
      function()
        require("nvterm.terminal").send "lua %"
      end,
      "Run current lua file",
    },
    -- Python
    ["<leader>Bp"] = { "+Python" },
    ["<leader>Bpp"] = {
      function()
        require("nvterm.terminal").send "python %"
      end,
      "run current python file",
    },
    ["<leader>Bpl"] = {
      function()
        require("nvterm.terminal").send "pylint %"
      end,
      "lint current file",
    },
    -- Django
    ["<leader>Bd"] = { "+Django" },
    ["<leader>Bdr"] = {
      function()
        require("nvterm.terminal").send "poetry run python manage.py runserver"
      end,
      "runserver",
    },
    ["<leader>BdR"] = {
      function()
        require("nvterm.terminal").send "poetry run python manage.py runserver --noreload"
      end,
      "runserver --noreload",
    },
    ["<leader>Bds"] = {
      function()
        require("nvterm.terminal").send "echo yes | poetry run python manage.py collectstatic --noinput"
      end,
      "django shell",
    },
    ["<leader>BdS"] = {
      function()
        require("nvterm.terminal").send "poetry run python manage.py createsuperuser"
      end,
      "create super user",
    },
    ["<leader>Bdc"] = {
      function()
        require("nvterm.terminal").send "echo yes | poetry run python manage.py collectstatic --noinput"
      end,
      "collect all static files",
    },
    ["<leader>Bdm"] = {
      function()
        require("nvterm.terminal").send "poetry run python manage.py makemigrations"
      end,
      "update db schema",
    },
    ["<leader>BdM"] = {
      function()
        require("nvterm.terminal").send "poetry run python manage.py migrate"
      end,
      "migrate db",
    },
    ---------------------------------------------------------------------------
    -- Buffers
    ---------------------------------------------------------------------------
    ["<leader>b"] = { "+buffer" },
    ["<leader>bx"] = { "<CMD>bdelete<CR>", "Close Buffer" },
    ["<leader>bX"] = { "<CMD>bdelete!<CR>", "Close Buffer with force" },
    ["<leader>bl"] = { "<CMD>ls<CR>", "List Buffers" },
    ---------------------------------------------------------------------------
    -- Coding
    ---------------------------------------------------------------------------
    ["<leader>c"] = { "+code" },
    -- LSP
    ["<leader>ca"] = {
      "<CMD> lua vim.lsp.buf.range_code_action()<CR>",
      "Do Range CodeAction",
    },
    ["<leader>cr"] = { "<cmd>lua vim.lsp.buf.rename()<CR>", "Rename code" },
    ["<leader>cs"] = { "<cmd>lua vim.lsp.buf.signature_help()<CR>", "Show signature help" },
    -- Diagnostics
    ["<leader>cdd"] = { "<cmd> lua vim.lsp.diagnostic.show_line_diagnostics()<CR>", "Show line diagnostics" },
    ["<leader>cdp"] = { "<cmd> lua vim.lsp.diagnostic.goto_prev()<CR>", "Go to previous diagnostic" },
    ["<leader>cdn"] = { "<cmd> lua vim.lsp.diagnostic.goto_next()<CR>", "Go to next diagnostic" },
    ["<leader>cdl"] = { "<cmd> lua vim.lsp.diagnostic.set_loclist()<CR>", "Set loclist" },
    -- Goto
    ["<leader>cgd"] = { "<cmd>lua vim.lsp.buf.definition()<CR>", "Go to definition" },
    ["<leader>cgD"] = { "<cmd>lua vim.lsp.buf.declaration()<CR>", "Go to declaration" },
    ["<leader>cgr"] = { "<cmd>lua vim.lsp.buf.references()<CR>", "References" },
    ["<leader>cgt"] = {
      "<cmd>lua vim.lsp.buf.type_definition()<CR>",
      "Go to type definition",
    },
    ["<leader>cgi"] = {
      "<cmd>lua vim.lsp.buf.implementation()<CR>",
      "Go to Implementation",
    },
    ---------------------------------------------------------------------------
    -- Debuggging
    ---------------------------------------------------------------------------
    ["<leader>d"] = { "+debug" },
    ---------------------------------------------------------------------------
    -- Finding
    ---------------------------------------------------------------------------
    ["<leader>f"] = { "+finding" },
    ---------------------------------------------------------------------------
    -- Git
    ---------------------------------------------------------------------------
    ["<leader>g"] = { "+git" },
    ["<leader>gn"] = { "<CMD> Neogit <CR>", "Neogit" },
    ---------------------------------------------------------------------------
    -- Terminal
    ---------------------------------------------------------------------------
    ["<leader>t"] = { "+terminal" },
    ---------------------------------------------------------------------------
    -- Utilities
    ---------------------------------------------------------------------------
    ["<leader>u"] = { "+utilities" },
    -- Toggle Tab Characters
    ["<leader>uv"] = {
      "<cmd>lua _G.toggle_tab_chars()<CR>",
      "啟用／關閉：顯示 Tab 字符",
    },
    ---------------------------------------------------------------------------
    -- Diagnostics/Quickfix
    ---------------------------------------------------------------------------
    ["<leader>x"] = { "+diagnostics/quickfix" },
    ---------------------------------------------------------------------------
    -- Windows
    ---------------------------------------------------------------------------
    -- Window
    ["<leader>w"] = { "+windows" },
    -- split window
    ["<leader>w-"] = { "<cmd>split<cr>", "Horizontal Split" },
    ["<leader>w_"] = { "<cmd>vsplit<cr>", "Vertical Split" },
    ["<leader>w|"] = { "<cmd>vsplit<cr>", "Vertical Split" },
    -- Move to window using the <ctrl> hjkl keys
    ["<leader>wf"] = { "Move Focus" },
    ["<leader>wfh"] = { "<C-w>h", "Move to Left Window" },
    ["<leader>wfj"] = { "<C-w>j", "Move to Down Window" },
    ["<leader>wfk"] = { "<C-w>k", "Move to Up Window" },
    ["<leader>wfl"] = { "<C-w>l", "Move to Right Window" },
    -- Resize window using <Alt> arrow keys
    ["<leader>ws"] = { "Resize Window" },
    ["<leader>ws<Up>"] = { "<cmd>resize -2<CR>", "Up Side" },
    ["<leader>ws<Down>"] = { "<cmd>resize +2<CR>", "Down Side" },
    ["<leader>ws<Left>"] = { "<cmd>vertical resize +2<CR>", "Left Side" },
    ["<leader>ws<Right>"] = { "<cmd>vertical resize -2<CR>", "Right Side" },
    -- Zoom-in/out window
    ["<leader>wi"] = { "<CMD>tabnew %<CR>", "Zoom-in" },
    ["<leader>wo"] = { "<CMD>tabclose<CR>", "Zoom-out" },
    ["<leader>wc"] = { "<CMD>close<CR>", "Close window" },
  },

  i = {
    ["kj"] = { "<ESC>", "escape insert mode", opts = { nowait = true } },
    ["<S-Down>"] = { "<Esc>:m .+1<CR>", "Move line down", opts = { nowait = true } },
    ["<S-Up>"] = { "<Esc>:m .-2<CR>", "Move line up", opts = { nowait = true } },
  },

  v = {
    ["<"] = { "<gv", "Unindent", opts = { nowait = true } },
    [">"] = { ">gv", "Indent", opts = { nowait = true } },
    ["J"] = { ":m '>+1<CR>gv=gv", "Move line down", opts = { nowait = true } },
    ["K"] = { ":m '<-2<CR>gv=gv", "Move line up", opts = { nowait = true } },
    ["<S-Down>"] = { ":m '>+1<CR>gv=gv", "Move line down", opts = { nowait = true } },
    ["<S-Up>"] = { ":m '<-2<CR>gv=gv", "Move line up", opts = { nowait = true } },
  },

  t = {
    -- toggle in terminal mode
    ["<leader>t"] = { "+terminal" },
    ["<leader>ti"] = {
      function()
        require("nvterm.terminal").toggle "float"
      end,
      "Toggle floating term",
    },

    ["<leader>th"] = {
      function()
        require("nvterm.terminal").toggle "horizontal"
      end,
      "Toggle horizontal term",
    },

    ["<leader>tv"] = {
      function()
        require("nvterm.terminal").toggle "vertical"
      end,
      "Toggle vertical term",
    },
  },
}

---------------------------------------------------------------------------
-- Build Tools
---------------------------------------------------------------------------

-- Build Tools
M.yabs = {
  plugin = true,
  n = {
    ["<leader>By"] = { "<cmd>lua require('yabs').run()<CR>", "Run Yabs" },
    ["<leader>Bc"] = { "<cmd>lua require('yabs').compile()<CR>", "Compile Yabs" },
    ["<leader>Bt"] = { "<cmd>lua require('yabs').test()<CR>", "Test Yabs" },
    ["<leader>Bd"] = { "<cmd>lua require('yabs').debug()<CR>", "Debug Yabs" },
  },
}

---------------------------------------------------------------------------
-- Coding
---------------------------------------------------------------------------

-- Outline
M.aerial = {
  plugin = true,
  n = {
    ["<leader>cot"] = { "<cmd>AerialToggle<cr>", "Toggle outline window" },
    ["<leader>coo"] = { "<cmd>AerialOpen<cr>", "Open outline window" },
    ["<leader>con"] = { "<cmd>AerialNext<CR>", "Jump forwards 1 symbols" },
    ["<leader>cop"] = { "<cmd>AerialPrev<CR>", "Jump backwards 1 symbols" },
  },
}

-- Splitting/Joining blocks of code
M.treesj = {
  plugin = true,
  n = {
    ["<leader>ctt"] = { "<cmd>lua require('treesj').toggle()<CR>", "Toggle node under cursor" },
    ["<leader>cts"] = { "<cmd>lua require('treesj').split()<CR>", "Split node under cursor" },
    ["<leader>ctj"] = { "<cmd>lua require('treesj').join()<CR>", "Join node under cursor" },
  },
}

---------------------------------------------------------------------------
-- Finding
---------------------------------------------------------------------------
M.nvimtree = {
  plugin = true,
  n = {
    ["<leader>fe"] = { "<CMD> NvimTreeFocus <CR>", "Open File Explorer" },
    ["<leader>fec"] = { "<CMD> NvimTreeClose <CR>", "Close File Explorer" },
    ["<leader>fef"] = { "<CMD> NvimTreeFindFileToggle <CR>", "Toggle File Explorer Filter" },
  },
}

M.telescope = {
  plugin = true,
  n = {
    ["<leader>fl"] = { "<CMD> Telescope live_grep <CR>", "Live Grep" },
    ["<leader>fd"] = { "<CMD> Telescope diagnostics <CR>", "Diagnostics" },
    ["<leader>fm"] = { "<cmd> Telescope marks <CR>", "telescope bookmarks" },
    -- pick a hidden term
    ["<leader>ft"] = { "<cmd> Telescope terms <CR>", "Pick hidden term" },
    -- theme switcher
    ["<leader>ut"] = { "<cmd> Telescope themes <CR>", "Nvchad themes" },
  },
}

---------------------------------------------------------------------------
-- Git
---------------------------------------------------------------------------

M.gitsigns = {
  plugin = true,
  n = {
    ["]g"] = {
      function()
        require("gitsigns").next_hunk()
      end,
      "Next Git hunk",
    },
    ["[g"] = {
      function()
        require("gitsigns").prev_hunk()
      end,
      "Previous Git hunk",
    },
    ["<leader>gl"] = {
      function()
        require("gitsigns").blame_line()
      end,
      "View Git blame",
    },
    ["<leader>gL"] = {
      function()
        require("gitsigns").blame_line { full = true }
      end,
      "View full Git blame",
    },
    ["<leader>gp"] = {
      function()
        require("gitsigns").preview_hunk()
      end,
      "Preview Git hunk",
    },
    ["<leader>gh"] = {
      function()
        require("gitsigns").reset_hunk()
      end,
      "Reset Git hunk",
    },
    ["<leader>gr"] = {
      function()
        require("gitsigns").reset_buffer()
      end,
      "Reset Git buffer",
    },
    ["<leader>gs"] = {
      function()
        require("gitsigns").stage_hunk()
      end,
      "Stage Git hunk",
    },
    ["<leader>gS"] = {
      function()
        require("gitsigns").stage_buffer()
      end,
      "Stage Git buffer",
    },
    ["<leader>gu"] = {
      function()
        require("gitsigns").undo_stage_hunk()
      end,
      "Unstage Git hunk",
    },
    ["<leader>gd"] = {
      function()
        require("gitsigns").diffthis()
      end,
      "View Git diff",
    },
  },
}

---------------------------------------------------------------------------
-- Terminal
---------------------------------------------------------------------------

M.nvterm = {
  plugin = true,
  n = {
    -- toggle in normal mode
    ["<leader>ti"] = {
      function()
        require("nvterm.terminal").toggle "float"
      end,
      "Toggle floating term",
    },

    ["<leader>th"] = {
      function()
        require("nvterm.terminal").toggle "horizontal"
      end,
      "Toggle horizontal term",
    },

    ["<leader>tv"] = {
      function()
        require("nvterm.terminal").toggle "vertical"
      end,
      "Toggle vertical term",
    },

    -- new
    ["<leader>tn"] = { "+new terminal" },
    ["<leader>tnh"] = {
      function()
        require("nvterm.terminal").new "horizontal"
      end,
      "New horizontal term",
    },

    ["<leader>tnv"] = {
      function()
        require("nvterm.terminal").new "vertical"
      end,
      "New vertical term",
    },
  },
}

---------------------------------------------------------------------------
-- Utilities
---------------------------------------------------------------------------

-- Markdown Preview
M.markdown_preview = {
  plugin = true,
  n = {
    ["<leader>um"] = { "+markdown" },
    ["<leader>ump"] = { "<cmd> MarkdownPreviewToggle<CR>", "Toggle MarkdownPreview" },
    ["<leader>umP"] = { "<cmd> MarkdownPreview<CR>", "Open Preview" },
    ["<leader>umc"] = { "<cmd> MarkdownPreviewStop<CR>", "Close Preview" },
  },
}

---------------------------------------------------------------------------
-- Diagnostics/Quickfix
---------------------------------------------------------------------------
M.trouble = {
  plugin = true,
  n = {
    -- Trouble
    ["<leader>xt"] = { "<cmd>TroubleToggle document_diagnostics<cr>", "Document Diagnostics (Trouble)" },
    ["<leader>xw"] = { "<cmd>TroubleToggle workspace_diagnostics<cr>", "Workspace Diagnostics (Trouble)" },
    ["<leader>xq"] = { "<cmd>TroubleToggle quickfix<cr>", "Quickfix List (Trouble)" },
    ["<leader>xr"] = {
      function()
        require("trouble").open "lsp_references"
      end,
      "LSP Reference (Trouble)",
    },
    ["[q"] = {
      function()
        if require("trouble").is_open() then
          require("trouble").previous { skip_groups = true, jump = true }
        else
          vim.cmd.cprev()
        end
      end,
      "Previous trouble/quickfix item",
    },
    ["]q"] = {
      function()
        if require("trouble").is_open() then
          require("trouble").next { skip_groups = true, jump = true }
        else
          vim.cmd.cnext()
        end
      end,
      "Next trouble/quickfix item",
    },
  },
}

return M
